// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: queries.sql

package db

import (
	"context"
	"database/sql"
)

const deleteSandbox = `-- name: DeleteSandbox :exec
DELETE FROM sandboxes
WHERE id = ?
`

func (q *Queries) DeleteSandbox(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteSandbox, id)
	return err
}

const getSandbox = `-- name: GetSandbox :one
SELECT id, container_id, host_origin_dir, sandbox_work_dir, image_name, dns_domain, env_file, created_at, updated_at FROM sandboxes
WHERE id = ?
LIMIT 1
`

func (q *Queries) GetSandbox(ctx context.Context, id string) (Sandbox, error) {
	row := q.db.QueryRowContext(ctx, getSandbox, id)
	var i Sandbox
	err := row.Scan(
		&i.ID,
		&i.ContainerID,
		&i.HostOriginDir,
		&i.SandboxWorkDir,
		&i.ImageName,
		&i.DnsDomain,
		&i.EnvFile,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSandboxesByImage = `-- name: GetSandboxesByImage :many
SELECT id, container_id, host_origin_dir, sandbox_work_dir, image_name, dns_domain, env_file, created_at, updated_at FROM sandboxes
WHERE image_name = ?
ORDER BY created_at DESC
`

func (q *Queries) GetSandboxesByImage(ctx context.Context, imageName string) ([]Sandbox, error) {
	rows, err := q.db.QueryContext(ctx, getSandboxesByImage, imageName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Sandbox
	for rows.Next() {
		var i Sandbox
		if err := rows.Scan(
			&i.ID,
			&i.ContainerID,
			&i.HostOriginDir,
			&i.SandboxWorkDir,
			&i.ImageName,
			&i.DnsDomain,
			&i.EnvFile,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSandboxes = `-- name: ListSandboxes :many
SELECT id, container_id, host_origin_dir, sandbox_work_dir, image_name, dns_domain, env_file, created_at, updated_at FROM sandboxes
ORDER BY created_at DESC
`

func (q *Queries) ListSandboxes(ctx context.Context) ([]Sandbox, error) {
	rows, err := q.db.QueryContext(ctx, listSandboxes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Sandbox
	for rows.Next() {
		var i Sandbox
		if err := rows.Scan(
			&i.ID,
			&i.ContainerID,
			&i.HostOriginDir,
			&i.SandboxWorkDir,
			&i.ImageName,
			&i.DnsDomain,
			&i.EnvFile,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateContainerID = `-- name: UpdateContainerID :exec
UPDATE sandboxes
SET container_id = ?,
    updated_at = CURRENT_TIMESTAMP
WHERE id = ?
`

type UpdateContainerIDParams struct {
	ContainerID sql.NullString `json:"container_id"`
	ID          string         `json:"id"`
}

func (q *Queries) UpdateContainerID(ctx context.Context, arg UpdateContainerIDParams) error {
	_, err := q.db.ExecContext(ctx, updateContainerID, arg.ContainerID, arg.ID)
	return err
}

const upsertSandbox = `-- name: UpsertSandbox :exec
INSERT INTO sandboxes (
    id, container_id, host_origin_dir, sandbox_work_dir,
    image_name, dns_domain, env_file
) VALUES (?, ?, ?, ?, ?, ?, ?)
ON CONFLICT(id) DO UPDATE SET
    container_id = excluded.container_id,
    host_origin_dir = excluded.host_origin_dir,
    sandbox_work_dir = excluded.sandbox_work_dir,
    image_name = excluded.image_name,
    dns_domain = excluded.dns_domain,
    env_file = excluded.env_file,
    updated_at = CURRENT_TIMESTAMP
`

type UpsertSandboxParams struct {
	ID             string         `json:"id"`
	ContainerID    sql.NullString `json:"container_id"`
	HostOriginDir  string         `json:"host_origin_dir"`
	SandboxWorkDir string         `json:"sandbox_work_dir"`
	ImageName      string         `json:"image_name"`
	DnsDomain      sql.NullString `json:"dns_domain"`
	EnvFile        sql.NullString `json:"env_file"`
}

func (q *Queries) UpsertSandbox(ctx context.Context, arg UpsertSandboxParams) error {
	_, err := q.db.ExecContext(ctx, upsertSandbox,
		arg.ID,
		arg.ContainerID,
		arg.HostOriginDir,
		arg.SandboxWorkDir,
		arg.ImageName,
		arg.DnsDomain,
		arg.EnvFile,
	)
	return err
}
